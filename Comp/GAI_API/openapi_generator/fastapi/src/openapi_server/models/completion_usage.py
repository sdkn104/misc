# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.completion_usage_completion_tokens_details import CompletionUsageCompletionTokensDetails
from openapi_server.models.completion_usage_prompt_tokens_details import CompletionUsagePromptTokensDetails
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompletionUsage(BaseModel):
    """
    Usage statistics for the completion request.
    """ # noqa: E501
    completion_tokens: StrictInt = Field(description="Number of tokens in the generated completion.")
    prompt_tokens: StrictInt = Field(description="Number of tokens in the prompt.")
    total_tokens: StrictInt = Field(description="Total number of tokens used in the request (prompt + completion).")
    completion_tokens_details: Optional[CompletionUsageCompletionTokensDetails] = None
    prompt_tokens_details: Optional[CompletionUsagePromptTokensDetails] = None
    __properties: ClassVar[List[str]] = ["completion_tokens", "prompt_tokens", "total_tokens", "completion_tokens_details", "prompt_tokens_details"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompletionUsage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of completion_tokens_details
        if self.completion_tokens_details:
            _dict['completion_tokens_details'] = self.completion_tokens_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prompt_tokens_details
        if self.prompt_tokens_details:
            _dict['prompt_tokens_details'] = self.prompt_tokens_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompletionUsage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completion_tokens": obj.get("completion_tokens") if obj.get("completion_tokens") is not None else 0,
            "prompt_tokens": obj.get("prompt_tokens") if obj.get("prompt_tokens") is not None else 0,
            "total_tokens": obj.get("total_tokens") if obj.get("total_tokens") is not None else 0,
            "completion_tokens_details": CompletionUsageCompletionTokensDetails.from_dict(obj.get("completion_tokens_details")) if obj.get("completion_tokens_details") is not None else None,
            "prompt_tokens_details": CompletionUsagePromptTokensDetails.from_dict(obj.get("prompt_tokens_details")) if obj.get("prompt_tokens_details") is not None else None
        })
        return _obj


