# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompletionUsageCompletionTokensDetails(BaseModel):
    """
    Breakdown of tokens used in a completion.
    """ # noqa: E501
    accepted_prediction_tokens: Optional[StrictInt] = Field(default=0, description="When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion. ")
    audio_tokens: Optional[StrictInt] = Field(default=0, description="Audio input tokens generated by the model.")
    reasoning_tokens: Optional[StrictInt] = Field(default=0, description="Tokens generated by the model for reasoning.")
    rejected_prediction_tokens: Optional[StrictInt] = Field(default=0, description="When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion. However, like reasoning tokens, these tokens are still counted in the total completion tokens for purposes of billing, output, and context window limits. ")
    __properties: ClassVar[List[str]] = ["accepted_prediction_tokens", "audio_tokens", "reasoning_tokens", "rejected_prediction_tokens"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompletionUsageCompletionTokensDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompletionUsageCompletionTokensDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accepted_prediction_tokens": obj.get("accepted_prediction_tokens") if obj.get("accepted_prediction_tokens") is not None else 0,
            "audio_tokens": obj.get("audio_tokens") if obj.get("audio_tokens") is not None else 0,
            "reasoning_tokens": obj.get("reasoning_tokens") if obj.get("reasoning_tokens") is not None else 0,
            "rejected_prediction_tokens": obj.get("rejected_prediction_tokens") if obj.get("rejected_prediction_tokens") is not None else 0
        })
        return _obj


