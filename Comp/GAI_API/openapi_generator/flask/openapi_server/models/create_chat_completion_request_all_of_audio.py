from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.voice_ids_shared import VoiceIdsShared
from openapi_server import util

from openapi_server.models.voice_ids_shared import VoiceIdsShared  # noqa: E501

class CreateChatCompletionRequestAllOfAudio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, voice=None, format=None):  # noqa: E501
        """CreateChatCompletionRequestAllOfAudio - a model defined in OpenAPI

        :param voice: The voice of this CreateChatCompletionRequestAllOfAudio.  # noqa: E501
        :type voice: VoiceIdsShared
        :param format: The format of this CreateChatCompletionRequestAllOfAudio.  # noqa: E501
        :type format: str
        """
        self.openapi_types = {
            'voice': VoiceIdsShared,
            'format': str
        }

        self.attribute_map = {
            'voice': 'voice',
            'format': 'format'
        }

        self._voice = voice
        self._format = format

    @classmethod
    def from_dict(cls, dikt) -> 'CreateChatCompletionRequestAllOfAudio':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateChatCompletionRequest_allOf_audio of this CreateChatCompletionRequestAllOfAudio.  # noqa: E501
        :rtype: CreateChatCompletionRequestAllOfAudio
        """
        return util.deserialize_model(dikt, cls)

    @property
    def voice(self) -> VoiceIdsShared:
        """Gets the voice of this CreateChatCompletionRequestAllOfAudio.


        :return: The voice of this CreateChatCompletionRequestAllOfAudio.
        :rtype: VoiceIdsShared
        """
        return self._voice

    @voice.setter
    def voice(self, voice: VoiceIdsShared):
        """Sets the voice of this CreateChatCompletionRequestAllOfAudio.


        :param voice: The voice of this CreateChatCompletionRequestAllOfAudio.
        :type voice: VoiceIdsShared
        """
        if voice is None:
            raise ValueError("Invalid value for `voice`, must not be `None`")  # noqa: E501

        self._voice = voice

    @property
    def format(self) -> str:
        """Gets the format of this CreateChatCompletionRequestAllOfAudio.

        Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`, `opus`, or `pcm16`.   # noqa: E501

        :return: The format of this CreateChatCompletionRequestAllOfAudio.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str):
        """Sets the format of this CreateChatCompletionRequestAllOfAudio.

        Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`, `opus`, or `pcm16`.   # noqa: E501

        :param format: The format of this CreateChatCompletionRequestAllOfAudio.
        :type format: str
        """
        allowed_values = ["wav", "aac", "mp3", "flac", "opus", "pcm16"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format
