from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ChatCompletionRequestMessageContentPartAudioInputAudio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data=None, format=None):  # noqa: E501
        """ChatCompletionRequestMessageContentPartAudioInputAudio - a model defined in OpenAPI

        :param data: The data of this ChatCompletionRequestMessageContentPartAudioInputAudio.  # noqa: E501
        :type data: str
        :param format: The format of this ChatCompletionRequestMessageContentPartAudioInputAudio.  # noqa: E501
        :type format: str
        """
        self.openapi_types = {
            'data': str,
            'format': str
        }

        self.attribute_map = {
            'data': 'data',
            'format': 'format'
        }

        self._data = data
        self._format = format

    @classmethod
    def from_dict(cls, dikt) -> 'ChatCompletionRequestMessageContentPartAudioInputAudio':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChatCompletionRequestMessageContentPartAudio_input_audio of this ChatCompletionRequestMessageContentPartAudioInputAudio.  # noqa: E501
        :rtype: ChatCompletionRequestMessageContentPartAudioInputAudio
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> str:
        """Gets the data of this ChatCompletionRequestMessageContentPartAudioInputAudio.

        Base64 encoded audio data.  # noqa: E501

        :return: The data of this ChatCompletionRequestMessageContentPartAudioInputAudio.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this ChatCompletionRequestMessageContentPartAudioInputAudio.

        Base64 encoded audio data.  # noqa: E501

        :param data: The data of this ChatCompletionRequestMessageContentPartAudioInputAudio.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def format(self) -> str:
        """Gets the format of this ChatCompletionRequestMessageContentPartAudioInputAudio.

        The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".   # noqa: E501

        :return: The format of this ChatCompletionRequestMessageContentPartAudioInputAudio.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str):
        """Sets the format of this ChatCompletionRequestMessageContentPartAudioInputAudio.

        The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".   # noqa: E501

        :param format: The format of this ChatCompletionRequestMessageContentPartAudioInputAudio.
        :type format: str
        """
        allowed_values = ["wav", "mp3"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format
