from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class JSONSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, name=None, _schema=None, strict=False):  # noqa: E501
        """JSONSchema - a model defined in OpenAPI

        :param description: The description of this JSONSchema.  # noqa: E501
        :type description: str
        :param name: The name of this JSONSchema.  # noqa: E501
        :type name: str
        :param _schema: The _schema of this JSONSchema.  # noqa: E501
        :type _schema: Dict[str, object]
        :param strict: The strict of this JSONSchema.  # noqa: E501
        :type strict: bool
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            '_schema': Dict[str, object],
            'strict': bool
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            '_schema': 'schema',
            'strict': 'strict'
        }

        self._description = description
        self._name = name
        self.__schema = _schema
        self._strict = strict

    @classmethod
    def from_dict(cls, dikt) -> 'JSONSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JSON_schema of this JSONSchema.  # noqa: E501
        :rtype: JSONSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this JSONSchema.

        A description of what the response format is for, used by the model to determine how to respond in the format.   # noqa: E501

        :return: The description of this JSONSchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this JSONSchema.

        A description of what the response format is for, used by the model to determine how to respond in the format.   # noqa: E501

        :param description: The description of this JSONSchema.
        :type description: str
        """

        self._description = description

    @property
    def name(self) -> str:
        """Gets the name of this JSONSchema.

        The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.   # noqa: E501

        :return: The name of this JSONSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this JSONSchema.

        The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.   # noqa: E501

        :param name: The name of this JSONSchema.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def _schema(self) -> Dict[str, object]:
        """Gets the _schema of this JSONSchema.

        The schema for the response format, described as a JSON Schema object. Learn how to build JSON schemas [here](https://json-schema.org/).   # noqa: E501

        :return: The _schema of this JSONSchema.
        :rtype: Dict[str, object]
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: Dict[str, object]):
        """Sets the _schema of this JSONSchema.

        The schema for the response format, described as a JSON Schema object. Learn how to build JSON schemas [here](https://json-schema.org/).   # noqa: E501

        :param _schema: The _schema of this JSONSchema.
        :type _schema: Dict[str, object]
        """

        self.__schema = _schema

    @property
    def strict(self) -> bool:
        """Gets the strict of this JSONSchema.

        Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).   # noqa: E501

        :return: The strict of this JSONSchema.
        :rtype: bool
        """
        return self._strict

    @strict.setter
    def strict(self, strict: bool):
        """Sets the strict of this JSONSchema.

        Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).   # noqa: E501

        :param strict: The strict of this JSONSchema.
        :type strict: bool
        """

        self._strict = strict
