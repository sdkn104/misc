from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.service_tier import ServiceTier
from openapi_server import util

from openapi_server.models.service_tier import ServiceTier  # noqa: E501

class CreateModelResponseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata=None, temperature=1, top_p=1, user=None, service_tier=ServiceTier.AUTO):  # noqa: E501
        """CreateModelResponseProperties - a model defined in OpenAPI

        :param metadata: The metadata of this CreateModelResponseProperties.  # noqa: E501
        :type metadata: Dict[str, str]
        :param temperature: The temperature of this CreateModelResponseProperties.  # noqa: E501
        :type temperature: float
        :param top_p: The top_p of this CreateModelResponseProperties.  # noqa: E501
        :type top_p: float
        :param user: The user of this CreateModelResponseProperties.  # noqa: E501
        :type user: str
        :param service_tier: The service_tier of this CreateModelResponseProperties.  # noqa: E501
        :type service_tier: ServiceTier
        """
        self.openapi_types = {
            'metadata': Dict[str, str],
            'temperature': float,
            'top_p': float,
            'user': str,
            'service_tier': ServiceTier
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'temperature': 'temperature',
            'top_p': 'top_p',
            'user': 'user',
            'service_tier': 'service_tier'
        }

        self._metadata = metadata
        self._temperature = temperature
        self._top_p = top_p
        self._user = user
        self._service_tier = service_tier

    @classmethod
    def from_dict(cls, dikt) -> 'CreateModelResponseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateModelResponseProperties of this CreateModelResponseProperties.  # noqa: E501
        :rtype: CreateModelResponseProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self) -> Dict[str, str]:
        """Gets the metadata of this CreateModelResponseProperties.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.   # noqa: E501

        :return: The metadata of this CreateModelResponseProperties.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, str]):
        """Sets the metadata of this CreateModelResponseProperties.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.   # noqa: E501

        :param metadata: The metadata of this CreateModelResponseProperties.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def temperature(self) -> float:
        """Gets the temperature of this CreateModelResponseProperties.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.   # noqa: E501

        :return: The temperature of this CreateModelResponseProperties.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this CreateModelResponseProperties.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.   # noqa: E501

        :param temperature: The temperature of this CreateModelResponseProperties.
        :type temperature: float
        """
        if temperature is not None and temperature > 2:  # noqa: E501
            raise ValueError("Invalid value for `temperature`, must be a value less than or equal to `2`")  # noqa: E501
        if temperature is not None and temperature < 0:  # noqa: E501
            raise ValueError("Invalid value for `temperature`, must be a value greater than or equal to `0`")  # noqa: E501

        self._temperature = temperature

    @property
    def top_p(self) -> float:
        """Gets the top_p of this CreateModelResponseProperties.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.   # noqa: E501

        :return: The top_p of this CreateModelResponseProperties.
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p: float):
        """Sets the top_p of this CreateModelResponseProperties.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.   # noqa: E501

        :param top_p: The top_p of this CreateModelResponseProperties.
        :type top_p: float
        """
        if top_p is not None and top_p > 1:  # noqa: E501
            raise ValueError("Invalid value for `top_p`, must be a value less than or equal to `1`")  # noqa: E501
        if top_p is not None and top_p < 0:  # noqa: E501
            raise ValueError("Invalid value for `top_p`, must be a value greater than or equal to `0`")  # noqa: E501

        self._top_p = top_p

    @property
    def user(self) -> str:
        """Gets the user of this CreateModelResponseProperties.

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).   # noqa: E501

        :return: The user of this CreateModelResponseProperties.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this CreateModelResponseProperties.

        A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).   # noqa: E501

        :param user: The user of this CreateModelResponseProperties.
        :type user: str
        """

        self._user = user

    @property
    def service_tier(self) -> ServiceTier:
        """Gets the service_tier of this CreateModelResponseProperties.


        :return: The service_tier of this CreateModelResponseProperties.
        :rtype: ServiceTier
        """
        return self._service_tier

    @service_tier.setter
    def service_tier(self, service_tier: ServiceTier):
        """Sets the service_tier of this CreateModelResponseProperties.


        :param service_tier: The service_tier of this CreateModelResponseProperties.
        :type service_tier: ServiceTier
        """

        self._service_tier = service_tier
