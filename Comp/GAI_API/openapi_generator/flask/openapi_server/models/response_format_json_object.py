from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseFormatJsonObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None):  # noqa: E501
        """ResponseFormatJsonObject - a model defined in OpenAPI

        :param type: The type of this ResponseFormatJsonObject.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'type': str
        }

        self.attribute_map = {
            'type': 'type'
        }

        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'ResponseFormatJsonObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResponseFormatJsonObject of this ResponseFormatJsonObject.  # noqa: E501
        :rtype: ResponseFormatJsonObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ResponseFormatJsonObject.

        The type of response format being defined. Always `json_object`.  # noqa: E501

        :return: The type of this ResponseFormatJsonObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ResponseFormatJsonObject.

        The type of response format being defined. Always `json_object`.  # noqa: E501

        :param type: The type of this ResponseFormatJsonObject.
        :type type: str
        """
        allowed_values = ["json_object"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
