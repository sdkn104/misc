from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.web_search_location import WebSearchLocation
from openapi_server import util

from openapi_server.models.web_search_location import WebSearchLocation  # noqa: E501

class WebSearchUserLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, approximate=None):  # noqa: E501
        """WebSearchUserLocation - a model defined in OpenAPI

        :param type: The type of this WebSearchUserLocation.  # noqa: E501
        :type type: str
        :param approximate: The approximate of this WebSearchUserLocation.  # noqa: E501
        :type approximate: WebSearchLocation
        """
        self.openapi_types = {
            'type': str,
            'approximate': WebSearchLocation
        }

        self.attribute_map = {
            'type': 'type',
            'approximate': 'approximate'
        }

        self._type = type
        self._approximate = approximate

    @classmethod
    def from_dict(cls, dikt) -> 'WebSearchUserLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Web_search_user_location of this WebSearchUserLocation.  # noqa: E501
        :rtype: WebSearchUserLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this WebSearchUserLocation.

        The type of location approximation. Always `approximate`.   # noqa: E501

        :return: The type of this WebSearchUserLocation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this WebSearchUserLocation.

        The type of location approximation. Always `approximate`.   # noqa: E501

        :param type: The type of this WebSearchUserLocation.
        :type type: str
        """
        allowed_values = ["approximate"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def approximate(self) -> WebSearchLocation:
        """Gets the approximate of this WebSearchUserLocation.


        :return: The approximate of this WebSearchUserLocation.
        :rtype: WebSearchLocation
        """
        return self._approximate

    @approximate.setter
    def approximate(self, approximate: WebSearchLocation):
        """Sets the approximate of this WebSearchUserLocation.


        :param approximate: The approximate of this WebSearchUserLocation.
        :type approximate: WebSearchLocation
        """
        if approximate is None:
            raise ValueError("Invalid value for `approximate`, must not be `None`")  # noqa: E501

        self._approximate = approximate
