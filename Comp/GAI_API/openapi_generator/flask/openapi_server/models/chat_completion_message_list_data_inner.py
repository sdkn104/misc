from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.chat_completion_message_tool_call import ChatCompletionMessageToolCall
from openapi_server.models.chat_completion_response_message_annotations_inner import ChatCompletionResponseMessageAnnotationsInner
from openapi_server.models.chat_completion_response_message_audio import ChatCompletionResponseMessageAudio
from openapi_server.models.chat_completion_response_message_function_call import ChatCompletionResponseMessageFunctionCall
from openapi_server import util

from openapi_server.models.chat_completion_message_tool_call import ChatCompletionMessageToolCall  # noqa: E501
from openapi_server.models.chat_completion_response_message_annotations_inner import ChatCompletionResponseMessageAnnotationsInner  # noqa: E501
from openapi_server.models.chat_completion_response_message_audio import ChatCompletionResponseMessageAudio  # noqa: E501
from openapi_server.models.chat_completion_response_message_function_call import ChatCompletionResponseMessageFunctionCall  # noqa: E501

class ChatCompletionMessageListDataInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content=None, refusal=None, tool_calls=None, annotations=None, role=None, function_call=None, audio=None, id=None):  # noqa: E501
        """ChatCompletionMessageListDataInner - a model defined in OpenAPI

        :param content: The content of this ChatCompletionMessageListDataInner.  # noqa: E501
        :type content: str
        :param refusal: The refusal of this ChatCompletionMessageListDataInner.  # noqa: E501
        :type refusal: str
        :param tool_calls: The tool_calls of this ChatCompletionMessageListDataInner.  # noqa: E501
        :type tool_calls: List[ChatCompletionMessageToolCall]
        :param annotations: The annotations of this ChatCompletionMessageListDataInner.  # noqa: E501
        :type annotations: List[ChatCompletionResponseMessageAnnotationsInner]
        :param role: The role of this ChatCompletionMessageListDataInner.  # noqa: E501
        :type role: str
        :param function_call: The function_call of this ChatCompletionMessageListDataInner.  # noqa: E501
        :type function_call: ChatCompletionResponseMessageFunctionCall
        :param audio: The audio of this ChatCompletionMessageListDataInner.  # noqa: E501
        :type audio: ChatCompletionResponseMessageAudio
        :param id: The id of this ChatCompletionMessageListDataInner.  # noqa: E501
        :type id: str
        """
        self.openapi_types = {
            'content': str,
            'refusal': str,
            'tool_calls': List[ChatCompletionMessageToolCall],
            'annotations': List[ChatCompletionResponseMessageAnnotationsInner],
            'role': str,
            'function_call': ChatCompletionResponseMessageFunctionCall,
            'audio': ChatCompletionResponseMessageAudio,
            'id': str
        }

        self.attribute_map = {
            'content': 'content',
            'refusal': 'refusal',
            'tool_calls': 'tool_calls',
            'annotations': 'annotations',
            'role': 'role',
            'function_call': 'function_call',
            'audio': 'audio',
            'id': 'id'
        }

        self._content = content
        self._refusal = refusal
        self._tool_calls = tool_calls
        self._annotations = annotations
        self._role = role
        self._function_call = function_call
        self._audio = audio
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'ChatCompletionMessageListDataInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChatCompletionMessageList_data_inner of this ChatCompletionMessageListDataInner.  # noqa: E501
        :rtype: ChatCompletionMessageListDataInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self) -> str:
        """Gets the content of this ChatCompletionMessageListDataInner.

        The contents of the message.  # noqa: E501

        :return: The content of this ChatCompletionMessageListDataInner.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this ChatCompletionMessageListDataInner.

        The contents of the message.  # noqa: E501

        :param content: The content of this ChatCompletionMessageListDataInner.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def refusal(self) -> str:
        """Gets the refusal of this ChatCompletionMessageListDataInner.

        The refusal message generated by the model.  # noqa: E501

        :return: The refusal of this ChatCompletionMessageListDataInner.
        :rtype: str
        """
        return self._refusal

    @refusal.setter
    def refusal(self, refusal: str):
        """Sets the refusal of this ChatCompletionMessageListDataInner.

        The refusal message generated by the model.  # noqa: E501

        :param refusal: The refusal of this ChatCompletionMessageListDataInner.
        :type refusal: str
        """
        if refusal is None:
            raise ValueError("Invalid value for `refusal`, must not be `None`")  # noqa: E501

        self._refusal = refusal

    @property
    def tool_calls(self) -> List[ChatCompletionMessageToolCall]:
        """Gets the tool_calls of this ChatCompletionMessageListDataInner.

        The tool calls generated by the model, such as function calls.  # noqa: E501

        :return: The tool_calls of this ChatCompletionMessageListDataInner.
        :rtype: List[ChatCompletionMessageToolCall]
        """
        return self._tool_calls

    @tool_calls.setter
    def tool_calls(self, tool_calls: List[ChatCompletionMessageToolCall]):
        """Sets the tool_calls of this ChatCompletionMessageListDataInner.

        The tool calls generated by the model, such as function calls.  # noqa: E501

        :param tool_calls: The tool_calls of this ChatCompletionMessageListDataInner.
        :type tool_calls: List[ChatCompletionMessageToolCall]
        """

        self._tool_calls = tool_calls

    @property
    def annotations(self) -> List[ChatCompletionResponseMessageAnnotationsInner]:
        """Gets the annotations of this ChatCompletionMessageListDataInner.

        Annotations for the message, when applicable, as when using the [web search tool](/docs/guides/tools-web-search?api-mode=chat).   # noqa: E501

        :return: The annotations of this ChatCompletionMessageListDataInner.
        :rtype: List[ChatCompletionResponseMessageAnnotationsInner]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations: List[ChatCompletionResponseMessageAnnotationsInner]):
        """Sets the annotations of this ChatCompletionMessageListDataInner.

        Annotations for the message, when applicable, as when using the [web search tool](/docs/guides/tools-web-search?api-mode=chat).   # noqa: E501

        :param annotations: The annotations of this ChatCompletionMessageListDataInner.
        :type annotations: List[ChatCompletionResponseMessageAnnotationsInner]
        """

        self._annotations = annotations

    @property
    def role(self) -> str:
        """Gets the role of this ChatCompletionMessageListDataInner.

        The role of the author of this message.  # noqa: E501

        :return: The role of this ChatCompletionMessageListDataInner.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this ChatCompletionMessageListDataInner.

        The role of the author of this message.  # noqa: E501

        :param role: The role of this ChatCompletionMessageListDataInner.
        :type role: str
        """
        allowed_values = ["assistant"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def function_call(self) -> ChatCompletionResponseMessageFunctionCall:
        """Gets the function_call of this ChatCompletionMessageListDataInner.


        :return: The function_call of this ChatCompletionMessageListDataInner.
        :rtype: ChatCompletionResponseMessageFunctionCall
        """
        return self._function_call

    @function_call.setter
    def function_call(self, function_call: ChatCompletionResponseMessageFunctionCall):
        """Sets the function_call of this ChatCompletionMessageListDataInner.


        :param function_call: The function_call of this ChatCompletionMessageListDataInner.
        :type function_call: ChatCompletionResponseMessageFunctionCall
        """

        self._function_call = function_call

    @property
    def audio(self) -> ChatCompletionResponseMessageAudio:
        """Gets the audio of this ChatCompletionMessageListDataInner.


        :return: The audio of this ChatCompletionMessageListDataInner.
        :rtype: ChatCompletionResponseMessageAudio
        """
        return self._audio

    @audio.setter
    def audio(self, audio: ChatCompletionResponseMessageAudio):
        """Sets the audio of this ChatCompletionMessageListDataInner.


        :param audio: The audio of this ChatCompletionMessageListDataInner.
        :type audio: ChatCompletionResponseMessageAudio
        """

        self._audio = audio

    @property
    def id(self) -> str:
        """Gets the id of this ChatCompletionMessageListDataInner.

        The identifier of the chat message.  # noqa: E501

        :return: The id of this ChatCompletionMessageListDataInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ChatCompletionMessageListDataInner.

        The identifier of the chat message.  # noqa: E501

        :param id: The id of this ChatCompletionMessageListDataInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id
