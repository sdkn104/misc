from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ChatCompletionResponseMessageAudio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, expires_at=None, data=None, transcript=None):  # noqa: E501
        """ChatCompletionResponseMessageAudio - a model defined in OpenAPI

        :param id: The id of this ChatCompletionResponseMessageAudio.  # noqa: E501
        :type id: str
        :param expires_at: The expires_at of this ChatCompletionResponseMessageAudio.  # noqa: E501
        :type expires_at: int
        :param data: The data of this ChatCompletionResponseMessageAudio.  # noqa: E501
        :type data: str
        :param transcript: The transcript of this ChatCompletionResponseMessageAudio.  # noqa: E501
        :type transcript: str
        """
        self.openapi_types = {
            'id': str,
            'expires_at': int,
            'data': str,
            'transcript': str
        }

        self.attribute_map = {
            'id': 'id',
            'expires_at': 'expires_at',
            'data': 'data',
            'transcript': 'transcript'
        }

        self._id = id
        self._expires_at = expires_at
        self._data = data
        self._transcript = transcript

    @classmethod
    def from_dict(cls, dikt) -> 'ChatCompletionResponseMessageAudio':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChatCompletionResponseMessage_audio of this ChatCompletionResponseMessageAudio.  # noqa: E501
        :rtype: ChatCompletionResponseMessageAudio
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ChatCompletionResponseMessageAudio.

        Unique identifier for this audio response.  # noqa: E501

        :return: The id of this ChatCompletionResponseMessageAudio.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ChatCompletionResponseMessageAudio.

        Unique identifier for this audio response.  # noqa: E501

        :param id: The id of this ChatCompletionResponseMessageAudio.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def expires_at(self) -> int:
        """Gets the expires_at of this ChatCompletionResponseMessageAudio.

        The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations.   # noqa: E501

        :return: The expires_at of this ChatCompletionResponseMessageAudio.
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: int):
        """Sets the expires_at of this ChatCompletionResponseMessageAudio.

        The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations.   # noqa: E501

        :param expires_at: The expires_at of this ChatCompletionResponseMessageAudio.
        :type expires_at: int
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")  # noqa: E501

        self._expires_at = expires_at

    @property
    def data(self) -> str:
        """Gets the data of this ChatCompletionResponseMessageAudio.

        Base64 encoded audio bytes generated by the model, in the format specified in the request.   # noqa: E501

        :return: The data of this ChatCompletionResponseMessageAudio.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this ChatCompletionResponseMessageAudio.

        Base64 encoded audio bytes generated by the model, in the format specified in the request.   # noqa: E501

        :param data: The data of this ChatCompletionResponseMessageAudio.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def transcript(self) -> str:
        """Gets the transcript of this ChatCompletionResponseMessageAudio.

        Transcript of the audio generated by the model.  # noqa: E501

        :return: The transcript of this ChatCompletionResponseMessageAudio.
        :rtype: str
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript: str):
        """Sets the transcript of this ChatCompletionResponseMessageAudio.

        Transcript of the audio generated by the model.  # noqa: E501

        :param transcript: The transcript of this ChatCompletionResponseMessageAudio.
        :type transcript: str
        """
        if transcript is None:
            raise ValueError("Invalid value for `transcript`, must not be `None`")  # noqa: E501

        self._transcript = transcript
