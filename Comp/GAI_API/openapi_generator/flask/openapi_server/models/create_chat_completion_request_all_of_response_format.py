from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.json_schema import JSONSchema
from openapi_server.models.response_format_json_object import ResponseFormatJsonObject
from openapi_server.models.response_format_json_schema import ResponseFormatJsonSchema
from openapi_server.models.response_format_text import ResponseFormatText
from openapi_server import util

from openapi_server.models.json_schema import JSONSchema  # noqa: E501
from openapi_server.models.response_format_json_object import ResponseFormatJsonObject  # noqa: E501
from openapi_server.models.response_format_json_schema import ResponseFormatJsonSchema  # noqa: E501
from openapi_server.models.response_format_text import ResponseFormatText  # noqa: E501

class CreateChatCompletionRequestAllOfResponseFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, json_schema=None):  # noqa: E501
        """CreateChatCompletionRequestAllOfResponseFormat - a model defined in OpenAPI

        :param type: The type of this CreateChatCompletionRequestAllOfResponseFormat.  # noqa: E501
        :type type: str
        :param json_schema: The json_schema of this CreateChatCompletionRequestAllOfResponseFormat.  # noqa: E501
        :type json_schema: JSONSchema
        """
        self.openapi_types = {
            'type': str,
            'json_schema': JSONSchema
        }

        self.attribute_map = {
            'type': 'type',
            'json_schema': 'json_schema'
        }

        self._type = type
        self._json_schema = json_schema

    @classmethod
    def from_dict(cls, dikt) -> 'CreateChatCompletionRequestAllOfResponseFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateChatCompletionRequest_allOf_response_format of this CreateChatCompletionRequestAllOfResponseFormat.  # noqa: E501
        :rtype: CreateChatCompletionRequestAllOfResponseFormat
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this CreateChatCompletionRequestAllOfResponseFormat.

        The type of response format being defined. Always `text`.  # noqa: E501

        :return: The type of this CreateChatCompletionRequestAllOfResponseFormat.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CreateChatCompletionRequestAllOfResponseFormat.

        The type of response format being defined. Always `text`.  # noqa: E501

        :param type: The type of this CreateChatCompletionRequestAllOfResponseFormat.
        :type type: str
        """
        allowed_values = ["text", "json_schema", "json_object"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def json_schema(self) -> JSONSchema:
        """Gets the json_schema of this CreateChatCompletionRequestAllOfResponseFormat.


        :return: The json_schema of this CreateChatCompletionRequestAllOfResponseFormat.
        :rtype: JSONSchema
        """
        return self._json_schema

    @json_schema.setter
    def json_schema(self, json_schema: JSONSchema):
        """Sets the json_schema of this CreateChatCompletionRequestAllOfResponseFormat.


        :param json_schema: The json_schema of this CreateChatCompletionRequestAllOfResponseFormat.
        :type json_schema: JSONSchema
        """
        if json_schema is None:
            raise ValueError("Invalid value for `json_schema`, must not be `None`")  # noqa: E501

        self._json_schema = json_schema
