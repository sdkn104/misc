from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.chat_completion_token_logprob import ChatCompletionTokenLogprob
from openapi_server import util

from openapi_server.models.chat_completion_token_logprob import ChatCompletionTokenLogprob  # noqa: E501

class CreateChatCompletionResponseChoicesInnerLogprobs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content=None, refusal=None):  # noqa: E501
        """CreateChatCompletionResponseChoicesInnerLogprobs - a model defined in OpenAPI

        :param content: The content of this CreateChatCompletionResponseChoicesInnerLogprobs.  # noqa: E501
        :type content: List[ChatCompletionTokenLogprob]
        :param refusal: The refusal of this CreateChatCompletionResponseChoicesInnerLogprobs.  # noqa: E501
        :type refusal: List[ChatCompletionTokenLogprob]
        """
        self.openapi_types = {
            'content': List[ChatCompletionTokenLogprob],
            'refusal': List[ChatCompletionTokenLogprob]
        }

        self.attribute_map = {
            'content': 'content',
            'refusal': 'refusal'
        }

        self._content = content
        self._refusal = refusal

    @classmethod
    def from_dict(cls, dikt) -> 'CreateChatCompletionResponseChoicesInnerLogprobs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateChatCompletionResponse_choices_inner_logprobs of this CreateChatCompletionResponseChoicesInnerLogprobs.  # noqa: E501
        :rtype: CreateChatCompletionResponseChoicesInnerLogprobs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self) -> List[ChatCompletionTokenLogprob]:
        """Gets the content of this CreateChatCompletionResponseChoicesInnerLogprobs.

        A list of message content tokens with log probability information.  # noqa: E501

        :return: The content of this CreateChatCompletionResponseChoicesInnerLogprobs.
        :rtype: List[ChatCompletionTokenLogprob]
        """
        return self._content

    @content.setter
    def content(self, content: List[ChatCompletionTokenLogprob]):
        """Sets the content of this CreateChatCompletionResponseChoicesInnerLogprobs.

        A list of message content tokens with log probability information.  # noqa: E501

        :param content: The content of this CreateChatCompletionResponseChoicesInnerLogprobs.
        :type content: List[ChatCompletionTokenLogprob]
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def refusal(self) -> List[ChatCompletionTokenLogprob]:
        """Gets the refusal of this CreateChatCompletionResponseChoicesInnerLogprobs.

        A list of message refusal tokens with log probability information.  # noqa: E501

        :return: The refusal of this CreateChatCompletionResponseChoicesInnerLogprobs.
        :rtype: List[ChatCompletionTokenLogprob]
        """
        return self._refusal

    @refusal.setter
    def refusal(self, refusal: List[ChatCompletionTokenLogprob]):
        """Sets the refusal of this CreateChatCompletionResponseChoicesInnerLogprobs.

        A list of message refusal tokens with log probability information.  # noqa: E501

        :param refusal: The refusal of this CreateChatCompletionResponseChoicesInnerLogprobs.
        :type refusal: List[ChatCompletionTokenLogprob]
        """
        if refusal is None:
            raise ValueError("Invalid value for `refusal`, must not be `None`")  # noqa: E501

        self._refusal = refusal
